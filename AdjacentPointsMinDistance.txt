Problem Statement: AdjacentPointsMinDistance
Level: Medium

Integer V lies strictly between integers U and W if U < V < W or if U > V > W.

A non-empty zero-indexed array A consisting of N integers is given. A pair of indices (P, Q), where 0 = P < Q < N, is said to have adjacent values if no value in the array lies strictly between values A[P] and A[Q].

For example, in array A such that:
  A[0] = 0
  A[1] = 3
  A[2] = 3
  A[3] = 7
  A[4] = 5
  A[5] = 3
  A[6] = 11
  A[7] = 1 
the following pairs of indices have adjacent values:
  (0, 7),   (1, 2),   (1, 4),
  (1, 5),   (1, 7),   (2, 4),
  (2, 5),   (2, 7),   (3, 4),
  (3, 6),   (4, 5),   (5, 7). 
For example, indices 4 and 5 have adjacent values because there is no value in array A that lies strictly between A[4] = 5 and A[5] = 3; the only such value could be the number 4, and it is not present in the array.

Given two indices P and Q, their distance is defined as abs(A[P] - A[Q]), where abs(X) = X for X = 0, and abs(X) = -X for X < 0. For example, the distance between indices 4 and 5 is 2 because (A[4] - A[5]) = (5 - 3) = 2.

Write a function:

int solution(int A[], int N);


that, given a non-empty zero-indexed array A consisting of N integers, returns the minimum distance between indices of this array that have adjacent values. The function should return -1 if the minimum distance is greater than 100,000,000. The function should return -2 if no adjacent indices exist.

Assume that:

•N is an integer within the range [1..40,000];
•each element of array A is an integer within the range [-2,147,483,648..2,147,483,647].

For example, given array A such that:
  A[0] =  0
  A[1] =  3
  A[2] =  3
  A[3] =  7
  A[4] =  5
  A[5] =  3
  A[6] = 11
  A[7] =  1 
the function should return 0 because:

•indices 1 and 2 are adjacent, because the array does not contain any value that lies strictly between A[1] = 3 and A[2] = 3;
•the distance between these indices is (A[1] - A[2]) = (3 - 3) = 0;
•no other pair of adjacent indices that has smaller distance exists.

Complexity:

•expected worst-case time complexity is O(N*log(N));
•expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).

Elements of input arrays can be modified.





Code:




var arr = [];
var A = [];
A[0] = 0;
A[1] = 3;
A[2] = 3;
A[3] = 7;
A[4] = 5;
A[5] = 3;
A[6] = 11;
A[7] = 1;
arr = A;
var mindistArray = [];

function findDist(pointA, pointB) {
  return Math.abs(arr[pointA] - arr[pointB]);
}

function isAdjacent(pointA, pointB) {
  var a = arr[pointA];
  var b = arr[pointB];
  if (a > b) {
    a = a + b;
    b = a - b;
    a = a - b;
  }
  var adjacent = true;
  for (var i = a + 1; i < b; i++) {
    if (arr.indexOf(i) > -1) {
      return adjacent = false;
    }
  }
  return adjacent;
}

function solution(array, length) {

  for (var i = 0; i < length - 1; i++) {
    for (var j = i + 1; j < length; j++) {
      if (isAdjacent(i, j)) {
        mindistArray.push(findDist(i, j));
      }
    }
  }

  mindistArray.sort(function(a, b) {
    return a - b;
  });

  return mindistArray[0];
}

console.log(solution(arr, 8));







Recusrsive approach snippet:



function findSolution(i,j,length){
	if (isAdjacent(i, j)) {
        mindistArray.push(findDist(i, j));
    }
    if(i>=length-2 && j>=length-1){ // All validation are done.
    	mindistArray.sort(function(a,b){
    	return a-b;
    	});//sort the mindistArray before returning
    	return 0;
    }else{
        if (i<length-2){ // First not reached second last index yet
			if(j<length-1){ // Second not reached last index yet.
	   			j++;
			}else{ // Second reached last index.
	  			i++;  // increment First.
	  			j=i+1; // reset Second.
			}
		}
		else{ 
		  i=length-2;
		  j=1+1;
		}
    	return findSolution(i,j,length);
    }
}  
findSolution(0,1,length);
